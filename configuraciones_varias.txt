----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------INSTALACIÓN Y CONFIGURACIÓN DE JUPYTER:---------------------------------
----------------------------------------------------------------------------------------------------------------------------------
# dependencias necesarias
sudo apt update
sudo apt install -y make build-essential libssl-dev zlib1g-dev \
  libbz2-dev libreadline-dev libsqlite3-dev libffi-dev \
  libncurses5-dev libncursesw5-dev liblzma-dev tk-dev \
  git curl

# instala pyenv en tu usuario (o en root si trabajas como root)
curl https://pyenv.run | bash

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init --path)"
eval "$(pyenv init -)"

# recarga el shell
source ~/.bashrc

pyenv install 3.10.13

# Sitúate en tu carpeta de desarrollo
cd /var/www/html/ia/asistente-energetico/entornos/env

# Dile a pyenv que aquí use la 3.10
pyenv local 3.10.13
# (se habrá creado un archivo .python-version)

# Crea el virtualenv dentro de esta carpeta
python -m venv .

# Activa
source bin/activate

# Actualiza pip e instala Jupyter y kernel
pip install --upgrade pip
pip install notebook ipykernel

# Registra el kernel para Jupyter
python -m ipykernel install \
  --user \
  --name=dev-py310-asistente-energetico \
  --display-name="Dev Python 3.10 - Asistente Energetico"

#jupyter notebook --ip=0.0.0.0 --port=8888 --no-browser --allow-root
----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------INSTALACIÓN Y CONFIGURACIÓN DE JUPYTER:---------------------------------
----------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------INSTALACIÓN Y CONFIGURACIÓN DE OLLAMA:---------------------------------
----------------------------------------------------------------------------------------------------------------------------------
#1) Limpiar por completo

    # Detener y deshabilitar el servicio Ollama
    sudo systemctl stop ollama         2>/dev/null || true
    sudo systemctl disable ollama      2>/dev/null || true

    # Borrar unidad y overrides
    sudo rm -f /etc/systemd/system/ollama.service
    sudo rm -rf /etc/systemd/system/ollama.service.d
    sudo systemctl daemon-reload

    # Quitar binario y datos
    sudo rm -f /usr/local/bin/ollama
    sudo rm -rf /usr/share/ollama
    sudo rm -rf /etc/ollama
    sudo userdel -r ollama            2>/dev/null || true
    sudo snap remove ollama           2>/dev/null || true

    # Limpiar configuración previa de Nginx
    sudo systemctl stop nginx         2>/dev/null || true
    sudo rm -f /etc/nginx/sites-enabled/ollama.conf
    sudo rm -f /etc/nginx/sites-available/ollama.conf
    sudo rm -f /etc/nginx/sites-enabled/default


#2) Reinstalar Ollama y crear usuario

    # Instala Ollama con el script oficial
    curl -fsSL https://ollama.com/install.sh | sudo sh

    # Crea el usuario de sistema “ollama” si no existe
    sudo groupadd --system ollama      2>/dev/null || true
    sudo useradd --system --gid ollama \
    --home-dir /usr/share/ollama \
    --shell /usr/sbin/nologin ollama || true

    # Asegura permisos
    sudo mkdir -p /usr/share/ollama
    sudo chown -R ollama:ollama /usr/share/ollama

#3) Configurar el servicio systemd para puerto 11435 vía ENV
    #Importante: Ollama no reconoce --host como flag; el único método soportado es con la variable de entorno OLLAMA_HOST 
sudo tee /etc/systemd/system/ollama.service > /dev/null << 'EOF'
[Unit]
Description=Ollama API Service
After=network-online.target
Wants=network-online.target

[Service]
User=ollama
Group=ollama
# Forzamos el bind en localhost:11435
Environment="OLLAMA_HOST=127.0.0.1:11435"
Environment="OLLAMA_ORIGINS=*"
ExecStart=/usr/local/bin/ollama serve
Restart=always
RestartSec=3

[Install]
WantedBy=multi-user.target
EOF

#Ahora habilita y arranca:
    sudo systemctl daemon-reload
    sudo systemctl enable ollama
    sudo systemctl start ollama

#Verifica que esté activo en el puerto 11435:
    ss -tlnp | grep 11435

#Deberías ver: LISTEN  0 4096 127.0.0.1:11435 0.0.0.0:* users:(("ollama",pid=…,fd=…))
----------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------INSTALACIÓN Y CONFIGURACIÓN DE OLLAMA:---------------------------------
----------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------INSTALACIÓN Y CONFIGURACIÓN DE NGINX:----------------------------------
----------------------------------------------------------------------------------------------------------------------------------
#4) Configurar Nginx en 0.0.0.0:11434 → 127.0.0.1:11435
sudo apt update
sudo apt install -y nginx

sudo tee /etc/nginx/sites-available/ollama.conf > /dev/null << 'EOF'
server {
    listen 0.0.0.0:11434;
    server_name _;

    # CORS (si haces peticiones desde un navegador)
    add_header Access-Control-Allow-Origin * always;
    add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Content-Type" always;

    location / {
        proxy_pass http://127.0.0.1:11435;
        proxy_http_version 1.1;
        proxy_set_header Host            $host;
        proxy_set_header X-Real-IP       $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}
EOF

sudo ln -sf /etc/nginx/sites-available/ollama.conf /etc/nginx/sites-enabled/ollama.conf
sudo rm -f /etc/nginx/sites-enabled/default
sudo nginx -t
sudo systemctl restart nginx

#Vuelve a comprobar:
    ss -tlnp | grep 1143

#Ahora deben aparecer dos listeners:
#127.0.0.1:11435   ← Ollama  
#0.0.0.0:11434     ← Nginx  

#5) Asegurar persistencia tras reinicio
#El servicio Ollama está habilitado (systemctl enable ollama), así que arrancará solo después de un reboot.

#Si ves que tras el reboot el comando ollama no está en tu PATH, añade un symlink:
    sudo ln -sf /usr/local/bin/ollama /usr/bin/ollama
#Para que los comandos CLI ollama list y ollama run apunten al puerto 11435, exporta la variable globalmente (ej. en /etc/environment):
    echo 'OLLAMA_HOST=127.0.0.1:11435' | sudo tee -a /etc/environment
    echo 'OLLAMA_ORIGINS=*'          | sudo tee -a /etc/environment
#Luego recarga:
    source /etc/environment

#6) Prueba final
#Desde otra máquina (o tras reiniciar tu servidor) ejecuta:

ollama list
ollama run mistral --prompt "ping" --stream=false
curl http://<TU_IP_O_DOMINIO>:11434/api/generate \
  -H "Content-Type: application/json" \
  -d '{"model":"mistral","prompt":"ping","stream":false}'

----------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------INSTALACIÓN Y CONFIGURACIÓN DE NGINX:----------------------------------
----------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------
---------------------------------CONFIGURACIÓN PARA EL ARCHIVO QUE CORRERÁ LOS PROYECTOS CON PM2:---------------------------------
----------------------------------------------------------------------------------------------------------------------------------
#Instalar node, npm y pm2
Crea el archivo ecosystem.config.js dentro de asistente-energetico y agrega lo siguiente:

module.exports = {
  apps: [
    {
      name: 'api-smartbuilding',
      script: 'app.js',
      cwd: '/var/www/html/ia/asistente-energetico/api-smartbuilding/api/src',
      watch: true
    },
    {
      name: 'jupyter-notebook',
      script: '/var/www/html/ia/asistente-energetico/entornos/env/bin/python',
      cwd:  '/var/www/html/ia/asistente-energetico/entornos/env/notebooks',
      args:  '-m jupyter notebook --allow-root --no-browser --ip=0.0.0.0 --port=8888 --NotebookApp.token=123456',
      watch: false
    }/*,
    {
      name: 'asistente-energetico',
      script: '/home/spin/entornos/venv-pruebas/bin/python',
      cwd: '/home/spin/apps/Avatar',
      args: 'App.py',
      watch: false
    }*/
  ]
};

Luego correr pm2 start ecosystem.config.js
----------------------------------------------------------------------------------------------------------------------------------
---------------------------------CONFIGURACIÓN PARA EL ARCHIVO QUE CORRERÁ LOS PROYECTOS CON PM2:---------------------------------
----------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------CONFIGURACIÓN PARA LA API DE VOZ:----------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------

Actualizar paquetes de linux con: sudo apt update
Instalar ffmpeg con: sudo apt install ffmpeg

Instalar dependencias del python con pip install -r dependencias.txt

----------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------CONFIGURACIÓN PARA LA API DE VOZ:----------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------